(clojure.string/join T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o)]
    (.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    (.flush ow)
    (.write ow (str ansi-esc 36 "m" "hello?"))
    (.flush ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(. server (close))
(def server (create-server new-connection 5073))
(str ansi-esc "ff")
(str ansi-esc "fc")
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o)]
    ;(.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    (.write ow (byte-array [255 252 42 255 251 1] ))
    (.flush ow)
    (.write ow (str ansi-esc 36 "m" "hello?"))
    (.flush ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(. server (close))
(def server (create-server new-connection 5073))
(char-array [255 251])
(char-array (map char [255 251]))
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o)]
    ;(.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    (.write ow (char-array (map char [255 252 42 255 251 1]) ))
    (.flush ow)
    (.write ow (str ansi-esc 36 "m" "hello?"))
    (.flush ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(. server (close))
(def server (create-server new-connection 5073))
(def  T_IAC  #_"\u00ff" "\377")
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o)]
    (.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    ;(.write ow (char-array (map char [255 252 42 255 251 1]) ))
    (.flush ow)
    (.write ow (str ansi-esc 36 "m" "hello?"))
    (.flush ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(. server (close))
(def server (create-server new-connection 5073))
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o)]
    ;(.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    ;(.write ow (char-array (map char [255 252 42 255 251 1]) ))
    (.write ow (char-array (map char [255 251 1 255 251 3 255 252 34]) ))
    (.flush ow)
    (.write ow (str ansi-esc 36 "m" "hello?"))
    (.flush ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(. server (close))
(def server (create-server new-connection 5073))
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o)]
    ;(.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    ;(.write ow (char-array (map char [255 252 42 255 251 1]) ))
    (.write ow "\377\375\042")
    (.flush ow)
    (.write ow (str ansi-esc 36 "m" "hello?"))
    (.flush ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(. server (close))
(def server (create-server new-connection 5073))
(. server (close))
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o)]
    ;(.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    ;(.write ow (char-array (map char [255 252 42 255 251 1]) ))
    ;(.write ow "\377\375\042")
    (.write ow (str T_IAC T_WONT T_ECHO)) 
    (.flush ow)
    (.write ow (str ansi-esc 36 "m" "hello?"))
    (.flush ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(def server (create-server new-connection 5073))
(. server (close))
(def server (create-server new-connection 5073))
(. server (close))
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o)]
    ;(.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    ;(.write ow (char-array (map char [255 252 42 255 251 1]) ))
    ;(.write ow "\377\375\042")
    (.write ow (str T_IAC T_WILL T_ECHO)) 
    (.flush ow)
    (.write ow (str ansi-esc 36 "m" "hello?"))
    (.flush ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(def server (create-server new-connection 5073))
"\u00ff\"
(. server (close))
"\u00ff\"
(. server (close))
(slurp "noecho")
"\xff\xfb\x01"
"\x00ff\x00fb\x0001"
"\u00ff\u00fb\u0001"
(def OUT (atom nil))
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o)]
    ;(.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    ;(.write ow (char-array (map char [255 252 42 255 251 1]) ))
    ;(.write ow "\377\375\042")
    (reset! OUT ow)
    (.write ow (str T_IAC T_WILL T_ECHO)) 
    (.flush ow)
    (.write ow (str ansi-esc 36 "m" "hello?"))
    (.flush ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(defn send [s]
  (.write @OUT s) 
  (.flush @OUT))
(defn send! [s]
  (.write @OUT s) 
  (.flush @OUT))
(def server (create-server new-connection 5073))
(send! "hello?>")
(send! "\u00ff\u00fb\u0001")
(send! "\033[2J")
(send! (str T_IAC "\n"))
(send! (str T_WILL " " T_ECHO))
(send! (str T_IAC "\n"))
(send! (str T_WONT " " T_ECHO))
(send! "\377\373\001")
(send! "\\377\\373\\001")
(send! "\377\373\001")
(send! (char-array (map char [255 252 1]) ))
(send! "\033[2J")
(send! "\033[ff\033[fb\033[01")
(send! "\033[ff\033[fc\033[01")
(send! "\033[fc\033[fc\033[01")
(send! "\033[fc\033[fc\033[07")
(send! (char-array (map char [255 252 1]) ))
(slurp "noline")
(char 1)
(char 377)
(send! "\77\5\42")
(char 377)\
(send! "\f\c\")
(send! "\ff\fc\01")
"
\
/
\
()
)
\"
(send! "\ff\fc\01")
(ns server.telnet
  (import 
    [java.net ServerSocket Socket SocketException]
    [java.io InputStreamReader OutputStreamWriter BufferedWriter]
    [clojure.lang LineNumberingPushbackReader]))
(def  T_IAC  "\u00ff" )
(def  T_WILL "\u00fb")
(def  T_WONT "\u00fc")
(def  T_DO   "\u00fd")
(def  T_DONT "\u00fe")
(def  T_SE   "\u00f0")
(def  T_SB   "\u00fa")
(def  T_CRLF "\r\n")
(def  T_ECHO "\u0001")
(def  T_LINE "\u0022")
(def  T_NAWS "\u001f")
(def  T_CSI  "\u001b[")
(def  T_CLR  "2J")
(def  T_ORIG "1;1H")
(def  T_HIDE "?25l")
(def  T_SHOW "?25h")
(def ansi-esc (String. (byte-array [27 (int \[)])))
(def OUT (atom nil))
(defn on-thread [f]
  (doto (new Thread f) (.start)))
(defn create-server [accept-socket port]
  (let [ss (new ServerSocket port)]
    (on-thread #(when-not (. ss (isClosed))
                  (try (accept-socket (. ss (accept)))
                       (catch SocketException e))
                  (recur))) ss))
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o)]
    ;(.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    ;(.write ow (char-array (map char [255 252 42 255 251 1]) ))
    ;(.write ow "\377\375\042")
    (reset! OUT ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(def server (create-server new-connection 5073))
(send! ":")
(defn send! [s]
  (.write @OUT s) 
  (.flush @OUT))
(send! ":")
(send! "\033[2J")
[0xff]
["0xff"]
["\uff"]
["\u00ff"]
slurp("noecho")
(slurp"noecho")
(send! (slurp"noecho"))
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o "ISO-8859-1")]
    ;(.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    ;(.write ow (char-array (map char [255 252 42 255 251 1]) ))
    ;(.write ow "\377\375\042")
    (reset! OUT ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(def server (create-server new-connection 5073))
(send! (str T_IAC T_WONT  T_ECHO))
(send! (str T_IAC T_WILL  T_ECHO))
(send! (char-array (map char [255 252 1]) ))
(send! (char-array (map char [0xff 0xfb 0x01]) ))
(send! 0xff)
@OUT
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o "8859_1")]
    ;(.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    ;(.write ow (char-array (map char [255 252 42 255 251 1]) ))
    ;(.write ow "\377\375\042")
    (reset! OUT ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(def server (create-server new-connection 5073))
(send! (str T_IAC T_WILL  T_ECHO))
(send! (str T_IAC T_WONT  T_ECHO))
(send! (char-array (map char [0xff 0xfb 0x01]) ))
(send! 0xff)
(Charset. "ISO-8859-1")
(java.nio.Charset. "ISO-8859-1")
(import [java.nio Charset])
(import [java.io Charset])
(import [java.nio.charset Charset])
(ns server.telnet
  (import 
    [java.net ServerSocket Socket SocketException]
    [java.io InputStreamReader OutputStreamWriter BufferedWriter]
    [clojure.lang LineNumberingPushbackReader]
    [java.nio.charset Charset]))
(def iso-latin-1 "The ISO Latin-1 charset object" (Charset/forName "ISO-8859-1"))
iso-latin-1
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o iso-latin-1)]
    ;(.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    ;(.write ow (char-array (map char [255 252 42 255 251 1]) ))
    ;(.write ow "\377\375\042")
    (reset! OUT ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(def server (create-server new-connection 5073))
(send! (str T_IAC T_WONT  T_ECHO))
(send! (char-array (map char [0xff 0xfb 0x01]) ))
(.aliases iso-latin-1)
(.newEncoder iso-latin-1)
(.encode (.newEncoder iso-latin-1) 0xff)
java.nio.CharBuffer
(java.nio.CharBuffer. 0xff)
(java.nio.CharBuffer. (char-array [0xff]))
(byte-array [255 253])
(byte-array [255 253 34 255 250 34 1 0 255 240 255 251 1])
(send! (byte-array [255 253 34 255 250 34 1 0 255 240 255 251 1]))
(send! (char-array [255 253 34 255 250 34 1 0 255 240 255 251 1]))
(String. (byte-array [255 253 34 255 250 34 1 0 255 240 255 251 1]))
(send! (String. (byte-array [255 253 34 255 250 34 1 0 255 240 255 251 1])))
(send! (char-array (byte-array [255 253 34 255 250 34 1 0 255 240 255 251 1])))
(send! (char-array (map char (byte-array [255 253 34 255 250 34 1 0 255 240 255 251 1]))))
(String. (byte-array [255 253 34 255 250 34 1 0 255 240 255 251 1]))
(String. (byte-array [255 253 34 255 250 34 1 0 255 240 255 251 1]), iso-latin-1)
(send! (String. (byte-array [255 253 34 255 250 34 1 0 255 240 255 251 1]), iso-latin-1))
(send! "\033[2J")
(send! (String. (byte-array [255 252 1]), iso-latin-1))
(send! (String. (byte-array [255 252 1])))
(send! (String. (byte-array [255 252 1]), "ISO-8859-1"))
(send! (String. (byte-array [255 252 1]), iso-latin-1))
(def utf-8 "The UTF-8 charset object" (Charset/forName "UTF-8"))
(def ascii "The ASCII charset object" (Charset/forName "US-ASCII"))
(. server (close))
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o utf-8)]
    ;(.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    ;(.write ow (char-array (map char [255 252 42 255 251 1]) ))
    ;(.write ow "\377\375\042")
    (reset! OUT ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(def server (create-server new-connection 5073))
(send! "\033[2J")
(send! (str T_IAC T_WONT  T_ECHO))
(send! (char-array (map char [0xff 0xfb 0x01]) ))
(send! (String. (byte-array [255 252 1]), iso-latin-1))
(send! (String. (byte-array [255 253 34 255 250 34 1 0 255 240 255 251 1]), iso-latin-1))
(.getBytes "abcd" "ISO-8859-1")
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i)
            ow (new OutputStreamWriter o iso-latin-1)]
    ;(.write ow (str T_IAC T_WONT T_LINE T_IAC T_WILL T_ECHO)) 
    ;(.write ow (char-array (map char [255 252 42 255 251 1]) ))
    ;(.write ow "\377\375\042")
    (reset! OUT ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(. server (close))
(def server (create-server new-connection 5073))
(send! (String. (byte-array [255 252 1]), iso-latin-1))
(send! "\033[2J")
(send! (String. (byte-array [255 251 1]), iso-latin-1))
(send! (String. (byte-array [255 252 1]), iso-latin-1))
(send! (String. (byte-array [255 253 34 255 250 34 1 0 255 240 255 251 1]), iso-latin-1))
(send! (String. (byte-array [255 252 1]), iso-latin-1))
(send! (String. (byte-array [255 251 1]), iso-latin-1))
(send! (String. (byte-array [255 252 1]), iso-latin-1))
(send! (str T_IAC T_WONT  T_ECHO))
(send! (str T_IAC T_WILL T_ECHO))
(send! (str T_IAC T_WONT  T_ECHO))
(send! (str T_IAC T_WILL T_ECHO))
(send! (str T_IAC T_WONT T_ECHO))
(send! T_CLR)
(send! T_CSI)
(def  T_CLR  "\033[2J")
(send! T_CLR)
(send! ansi-esc 31 "m" "hello")
(send! (str ansi-esc 31 "m" "hello"))
(send! (str ansi-esc 30 "m" "hello"))
(send! (str ansi-esc 41 "m" "hello"))
(send! (str T_IAC T_WILL T_ECHO))
(send! (str T_IAC T_WONT T_ECHO))
(defn send! [& s]
  (.write @OUT (apply str s)) 
  (.flush @OUT))
(send! T_IAC T_WILL T_LINE)
(send! T_IAC T_WONT T_LINE)
(send! T_IAC T_DO T_LINE)
(send! T_IAC T_DONT T_LINE)
(send! T_CLR)
(send! (str T_IAC T_WILL T_ECHO))
(send! T_ORIG)
(send! ansi-esc T_ORIG "m")
(send! ansi-esc T_ORIG )
(send! "@")
(send! ansi-esc "10;10H")
(send! ansi-esc "40;10H")
(send! ansi-esc "40;40H")
(send! T_CLR)
(def cursor! [x y]
  (str ansi-esc x ";" y "H"))
(def cursor [x y]
  (str ansi-esc x ";" y "H"))
(for [i (range 40)]
  (do 
    (send! (cursor i i))
    (send! "@")))
(defn cursor [x y]
  (str ansi-esc x ";" y "H"))
(for [i (range 40)]
  (do 
    (send! (cursor i i))
    (send! "@")))
(send! T_CLR)
(for [i (range 20)]
  (do 
    (send! (cursor i i))
    (send! "@")))
(send! T_IAC T_DO T_NAWS)
(send! T_CLR)
(. server (close))
(defn new-connection [s] 
  (on-thread 
    (fn [] 
      (let [i (. s (getInputStream)) 
            o (. s (getOutputStream))
            ir (new InputStreamReader i iso-latin-1)
            ow (new OutputStreamWriter o iso-latin-1)]
    (reset! OUT ow)
    (while (not (. s (isClosed)))
      (let [c (char (.read ir))]
        (prn c)))))))
(def server (create-server new-connection 5073))
(send! T_IAC T_DO T_NAWS)
(str T_NAWS)
(int \ÿ)
(int \ú)
(int \ð)
(int \ú)
(int \)
)
(send! T_CLR)
(for [i (range 20)]
  (do 
    (send! (cursor i i))
    (send! "@")))
(send! ansi-esc "40;40H")
(send! T_IAC T_DO T_NAWS)
(send! T_IAC T_DONT T_NAWS)
(send! T_IAC T_DO T_NAWS)
(str T_IAC)
(char T_IAC)
(str T_IAC)
